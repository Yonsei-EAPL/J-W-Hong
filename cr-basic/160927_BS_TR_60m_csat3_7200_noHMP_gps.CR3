'CR3000 Series Datalogger
'Copyright (c) 2002, 2006, 2010 Campbell Scientific, Inc. All rights reserved.
'26 Sep 16
'
'The following sensors are measured:
'Sensors (As of 26 Sep. 2016) ******************
'CSAT3(SN:)     three dimensional sonic anemometer(SDM_Add = 2)
'LI7200RS(SN:)     closed path infrared gas analyzer (CO2 and H2O)(SDM_Add = 3)
'CNR4(SN:)
'
'green - c1
'white - c2
'brown - c3
'black / clear - g
'red - 12v
'black - g

PipeLineMode

'SDM address
'1- 7200RS
'3- CSAT3
Const LI7200_SDM_ADDR = 1
Const CSAT3_SDM_ADDR = 3

'Declare Variables and Units
Public Batt_Volt, PTemp_C
Units Batt_Volt=Volts

'Program working variables.
Dim scan_count As Long                                   'Number scans executed.
Dim slowsequence_finished_f As Boolean                   'Flag used to indicate the SlowSequence has finished its scan.
Dim slowsequence_disable_f As Boolean = TRUE             'Flag used to decimate statistics in main scan.
Dim dly_data_out(20)                                               'Array used to temporarily store the lagged record.

'Dim buff_depth
Dim i As Long
Dim n = 1
Units n = samples

Const OFFSET = 11					'An offset delay that will be introduced to the CSAT3, LI-7200, and analog data.
Const DELAY_CSAT3 = 2                      'Fixed CSAT3 delay.
Const CSAT3_REC_BCK = OFFSET-DELAY_CSAT3   'Number of records back to align CSAT3 data.
'Measurement Rate					'10 Hz			20 Hz
Const SCAN_INTERVAL = 50			'100 (mSec)		50 (mSec)
'Output period
Const OUTPUT_INTERVAL = 30			'On-line flux_60m data output interval in minutes.

Const CP = 1004.67				'Estimate of heat capacity of air [J/(kg K)].
Const press = 101.3
Public rho_a				'Density of moist air.
Units rho_a = kg/(m^3)

Public flag(8)
Const YES = -1					'Yes is defined as True or -1.
Const NO = 0					'No is defined as False or 0.


'CSAT3 variables with additional one or four scan delay.
Public wind(5)					'Wind, temperature, and diagnostic data from CSAT3.
Alias wind(1) = Ux_60m
Alias wind(2) = Uy_60m
Alias wind(3) = Uz_60m
Alias wind(4) = Ts_60m
Alias wind(5) = diag_sonic
Units wind = m/s
Units Ts_60m = C
Units diag_sonic = arb

Public wnd_dir_compass    
Units wnd_dir_compass = deg

Public diag_bits_sonic(4) As Boolean       'Sonic warning flags.
Alias diag_bits_sonic(1) = amp_l_f         'Amplitude low warning flag.
Alias diag_bits_sonic(2) = amp_h_f         'Amplitude high warning flag.
Alias diag_bits_sonic(3) = sig_lck_f       'Poor signal lock warning flag.
Alias diag_bits_sonic(4) = del_T_f         'Delta temperature warning flag.
Units diag_bits_sonic = arb

Const sonic_azimuth = 85                  'Unique Value

Dim diag_sonic_tmp As Long                 'Temporary variable used to break out the CSAT3(A) diagnostic bits.
Dim mask_sonic As Long
Dim sonic_disable_f As Boolean             'TRUE when CSAT3(A) diagnostic warning flags are on or CSAT3(A) has not sent data or an SDM signature error is reported.
'Dim Ts_absolute                            'Sonic temperature (K).

'Flux variables.
Public Hs_60m(1)		'Sensible heat flux_60m using sonic temperature.
Public tau_60m(1)		'Momentum flux_60m.
Public u_star_60m(1)	'Friction velocity.
'Public cov_out(18)	'Covariances of wind and scalars, wind vector, mean soil temperature.
Units Hs_60m = W/m^2
Units tau_60m = kg m/s^2
Units u_star_60m = m/s


'Working variables.
'Dim j					      'Counter variable.
Dim wind_east				'Uy_60m wind in compass coordinate system.
Dim wind_north			'Ux_60m wind in compass coordinate system.

Public CNR4(4)
Public CNR4Mult(4)
Public CNR4TC
Public CNR4TK
Public Short_R_Net
Public Long_R_Net
Public Albedo
Public Total_Net_R
Public LongUpCo
Public LongDnCo

Alias CNR4(1)=ShortUp
Alias CNR4(2)=ShortDn
Alias CNR4(3)=LongUp
Alias CNR4(4)=LongDn
Alias CNR4Mult(1)=SUpMult
Alias CNR4Mult(2)=SDnMult
Alias CNR4Mult(3)=LUpMult
Alias CNR4Mult(4)=LDnMult

Units CNR4TC=Deg C
Units CNR4TK=K
Units Short_R_Net=W/m^2
Units Long_R_Net=W/m^2
Units Albedo=W/m^2
Units Total_Net_R=W/m^2
Units LongUpCo=W/m^2
Units LongDnCo=W/m^2
Units ShortUp=W/m^2
Units ShortDn=W/m^2
Units LongUp=W/m^2
Units LongDn=W/m^2

'******************* variables for LI7200 **********************
Const DELAY_LI7200 = 3				 'For now we only consider time delay from SMD LI7200(0.3sec).
Const LI7200_REC_BCK = OFFSET - DELAY_LI7200	'???  'Number of records back to align 7200 data.

Public li7200_raw(10)
Alias li7200_raw(1) = li7200_co2_m_raw
Alias li7200_raw(2) = li7200_h2o_m_raw
Alias li7200_raw(3) = li7200_co2_d_raw
Alias li7200_raw(4) = li7200_h2o_d_raw
Alias li7200_raw(5) = li7200_agc_raw
Alias li7200_raw(6) = li7200_Ptot_raw
Alias li7200_raw(7) = li7200_Tin_raw
Alias li7200_raw(8) = li7200_Tout_raw
Alias li7200_raw(9) = li7200_Tavg_raw
Alias li7200_raw(10)= li7200_diag_raw

Public li7200_arr(10)
Alias li7200_arr(1) = li7200_co2_m
Alias li7200_arr(2) = li7200_h2o_m
Alias li7200_arr(3) = li7200_co2_d
Alias li7200_arr(4) = li7200_h2o_d
Alias li7200_arr(5) = li7200_agc
Alias li7200_arr(6) = li7200_Ptot
Alias li7200_arr(7) = li7200_Tin
Alias li7200_arr(8) = li7200_Tout
Alias li7200_arr(9) = li7200_Tavg
Alias li7200_arr(10)= li7200_diag
Units li7200_co2_m = umol/mol
Units li7200_h2o_m = mmol/mol
Units li7200_co2_d = mmol/m3
Units li7200_h2o_d = mmol/m3
Units li7200_agc = %
Units li7200_Ptot = kPa
Units li7200_Tin = degC
Units li7200_Tout = degC
Units li7200_Tavg = degC
Units li7200_diag = arb

Dim cov_array_li7200(1,6)                'Arrays used to hold the input data for the covariance instructions (EC150 and CSAT3A sonic head).
Public cov_out_li7200(25)                          'EC150 statistics.
Alias cov_out_li7200(1) = ux_stdev
Alias cov_out_li7200(2) = ux_uy_cov
Alias cov_out_li7200(3) = ux_uz_cov
Alias cov_out_li7200(4) = ux_Ts_cov
Alias cov_out_li7200(5) = ux_co2_cov
Alias cov_out_li7200(6) = ux_h2o_cov
Alias cov_out_li7200(7) = uy_stdev
Alias cov_out_li7200(8) = uy_uz_cov
Alias cov_out_li7200(9) = uy_Ts_cov
Alias cov_out_li7200(10) = uy_co2_cov
Alias cov_out_li7200(11) = uy_h2o_cov
Alias cov_out_li7200(12) = uz_stdev
Alias cov_out_li7200(13) = uz_Ts_cov
Alias cov_out_li7200(14) = uz_co2_cov
Alias cov_out_li7200(15) = uz_h2o_cov
Alias cov_out_li7200(16) = Ts_stdev
Alias cov_out_li7200(17) = Ts_co2_cov
Alias cov_out_li7200(18) = Ts_h2o_cov
Alias cov_out_li7200(19) = co2_stdev
Alias cov_out_li7200(20) = co2_h2o_cov
Alias cov_out_li7200(21) = h2o_stdev
Alias cov_out_li7200(22) = windspeed
Alias cov_out_li7200(23) = rslt_windspeed
Alias cov_out_li7200(24) = wnd_dir_sonic
Alias cov_out_li7200(25) = wnd_dir_stdev
Units cov_out_li7200 = (m/s)^2
Units ux_stdev = m/s
Units uy_stdev = m/s
Units uz_stdev = m/s
Units Ts_stdev = degC
Units co2_stdev = umol/mol
Units h2o_stdev = mmol/mol
Units ux_co2_cov = (m/s)(umol/mol)
Units uy_co2_cov = (m/s)(umol/mol)
Units uz_co2_cov = (m/s)(umol/mol)
Units Ts_co2_cov = (C)(umol/mol)
Units ux_h2o_cov = (m/s)(mmol/mol)
Units uy_h2o_cov = (m/s)(mmol/mol)
Units uz_h2o_cov = (m/s)(mmol/mol)
Units Ts_h2o_cov = (C)(mmol/mol)
Units ux_Ts_cov = (m/s)(C)
Units uy_Ts_cov = (m/s)(C)
Units uz_Ts_cov = (m/s)(C)
Units co2_h2o_cov = (umol/mol)(mmol/mol)
Units windspeed = m/s
Units rslt_windspeed = m/s
Units wnd_dir_stdev = degrees

Public diag_bits_li7200(9) As Boolean      'LI7200 warning flags.
Alias diag_bits_li7200(1) = sync_f         'Always OK, Not Used
Alias diag_bits_li7200(2) = pll_f          'Phase Lock Loop (status of optical filter wheel) flag.
Alias diag_bits_li7200(3) = detector_f     'detector temperature flag.
Alias diag_bits_li7200(4) = chopper_f      'chopper temperature flag.
Alias diag_bits_li7200(5) = press_f        'diff pressure sensor flag.
Alias diag_bits_li7200(6) = Aux_in_f       'reference voltage warning flag.
Alias diag_bits_li7200(7) = Tin_f          'T in demage flag.
Alias diag_bits_li7200(8) = Tout_f         'T out damage flag.
Alias diag_bits_li7200(9) = head_f         'head dectected flag.
Units diag_bits_li7200 = arb

Dim diag_li7200_tmp As Long                 'Temporary variable used to break out the LI7200 diagnostic bits.
Dim mask_li7200 As Long

Dim li7200_disable_f As Boolean             'TRUE when LI7200 diagnostic warning flags are on or LI7200 has not sent data or an SDM signature error is reported.
Dim li7200_cov_disable_f As Boolean         'TRUE when LI7200 diagnostic warning flags OR CSAT3 diagnostic waring flags ON.
'*******************end of Li7200 variables ********************

Public prop_WD, prop_WS, amb_press
Public JY_WS, JY_WS_pre

DataTable (prop_wind_60m,TRUE,-1)
  DataInterval (0,1,min,100)
  CardOut (0,500000)

  WindVector (1,prop_WS,prop_WD,FP2,False,0,0,0)
  Maximum (1,prop_WS,FP2,FALSE,FALSE)
  Average (1,JY_WS,FP2,FALSE)
  Maximum (1,JY_WS,FP2,FALSE,FALSE)  

EndTable 

'Compute the covariances of vertical wind, co2, h2o, natural log of the krypton
'voltage, sonic temperature, and fine wire thermocouple temperature, as well as the
'other cross products, required to rotate the data into natural wind coordinates.
'This data is output every OUTPUT_INTERVAL minutes.
DataTable (comp_cov_li7200,TRUE,1)
  DataInterval (0,OUTPUT_INTERVAL,min,1)'
  'Compute covariances from CSAT3(A) data.
  Covariance (6,cov_array_li7200(1,1),IEEE4,li7200_cov_disable_f,21)
  WindVector (1,Uy_60m,Ux_60m,IEEE4,sonic_disable_f,0,1,2)
EndTable

'Set flag(8) high or set "Save Time Series?" custom menu option to Yes to save time
'series data.
DataTable (ts_data_60m,flag(8),-1)
  DataInterval (0,SCAN_INTERVAL,mSec,10)
  TableFile("CRD:"&Status.SerialNumber(1,1)&".ts_data_60m_",64,-1,0,1,Day,0,0)
  '  CardOut (0,-1)
  Sample (5,wind(1),IEEE4)
  Sample (10,li7200_co2_m,IEEE4)

EndTable

'***** Start of Working tables *****
DataTable (delay_table,TRUE,OFFSET)
  Sample (5,wind(1),IEEE4)
  Sample (10,li7200_raw(1),IEEE4)
EndTable

'This table will hold twenty-eight days of flux_60m data.  This data is
' output every OUTPUT_INTERVAL minutes.
DataTable (flux_60m,TRUE,-1)
  DataInterval (0,OUTPUT_INTERVAL,Min,10)
  CardOut (0,5000000)

  Sample (1,Hs_60m(1),IEEE4)
  Sample (1,tau_60m(1),IEEE4)
  Sample (1,u_star_60m(1),IEEE4)
  'Sample (10,cov_out(1),IEEE4)
  Average (4,wind(1),IEEE4,sonic_disable_f)
  Average (4,li7200_co2_m,IEEE4,li7200_disable_f)
  Average (4,li7200_Ptot,IEEE4,li7200_disable_f)
  
  Sample (21,ux_stdev,IEEE4)
  Sample (1,wnd_dir_compass,IEEE4)
  Sample (1,wnd_dir_sonic,IEEE4)
  Sample (1,windspeed,IEEE4)
  Sample (1,rslt_windspeed,IEEE4)


  Totalize (1,n,IEEE4,sonic_disable_f)
  FieldNames ("sonic_samples_Tot")
  Totalize (1,n,IEEE4,diag_sonic<>-1)
  FieldNames ("no_sonic_head_Tot")
  Totalize (1,n,IEEE4,diag_sonic<>NAN)
  FieldNames ("no_new_sonic_data_Tot")
  Totalize (1,n,IEEE4,amp_l_f IMP (diag_sonic=NAN))
  FieldNames ("amp_l_f_Tot")
  Totalize (1,n,IEEE4,amp_h_f IMP (diag_sonic=NAN))
  FieldNames ("amp_h_f_Tot")
  Totalize (1,n,IEEE4,sig_lck_f IMP (diag_sonic=NAN))
  FieldNames ("sig_lck_f_Tot")
  Totalize (1,n,IEEE4,del_T_f IMP (diag_sonic=NAN))
  FieldNames ("del_T_f_Tot")
  
  Totalize (1,n,IEEE4,li7200_disable_f)
  FieldNames ("LI7200_samples_Tot")
  Totalize (1,n,IEEE4,sync_f IMP (li7200_diag=NAN))
  FieldNames ("sync_f_Tot")
  Totalize (1,n,IEEE4,pll_f IMP (li7200_diag=NAN))
  FieldNames ("pll_f_Tot")
  Totalize (1,n,IEEE4,detector_f IMP (li7200_diag=NAN))
  FieldNames ("detector_f_Tot")
  Totalize (1,n,IEEE4,chopper_f IMP (li7200_diag=NAN))
  FieldNames ("chopper_f_Tot")
  Totalize (1,n,IEEE4,press_f IMP (li7200_diag=NAN))
  FieldNames ("press_f_Tot")
  Totalize (1,n,IEEE4,Aux_in_f IMP (li7200_diag=NAN))
  FieldNames ("Aux_in_f_Tot")
  Totalize (1,n,IEEE4,Tin_f IMP (li7200_diag=NAN))
  FieldNames ("Tin_f_Tot")
  Totalize (1,n,IEEE4,Tout_f IMP (li7200_diag=NAN))
  FieldNames ("Tout_f_Tot")
  Totalize (1,n,IEEE4,head_f IMP (li7200_diag=NAN))
  FieldNames ("head_f_Tot")
  
  Average(1,ShortUp,FP2,0)   'net radiometer
  Average(1,ShortDn,FP2,0)
  Average(1,LongUp,FP2,0)
  Average(1,LongDn,FP2,0)
  Average(1,CNR4TC,FP2,0)
  Average(1,CNR4TK,FP2,0)
  Average(1,Short_R_Net,FP2,0)
  Average(1,Long_R_Net,FP2,0)
  Average(1,Albedo,FP2,0)
  Average(1,Total_Net_R,FP2,0)
  Average(1,LongUpCo,FP2,0)
  Average(1,LongDnCo,FP2,0)

  Sample(1,Batt_Volt,FP2)
  Sample(1,PTemp_C,FP2)

  Average (1,amb_press,IEEE4,0)
   
EndTable

'*** Define Custom Menus ***

DisplayMenu ("Program Control",100)

  MenuItem ("Save Time Series?",flag(8))
MenuPick (YES,NO)

EndMenu

'Program the GPS16-HVS to use 38.4 kbaud, no parity, 8 data bits, and 1 stop bit
'*** Wiring ***
'CONTROL PORTS
'C3   GPS16-HVS pulse per second (gray)
'C4   GPS16-HVS RS-232 TxD (white)
'G    yellow, blue, shield
'POWER OUT
'12V  GPS16-HVS power (red)
'G    GPS16-HVS power and RS-232 signal reference (black)
Const LOCAL_TIME_OFFSET = 9            'Local time offset relative to UTC time
 
Dim nmea_sentence(2) As String * 90
Public gps_data(15)
Alias gps_data(1) = latitude_a          'Degrees latitude (+ = North; - = South)
Alias gps_data(2) = latitude_b          'Minutes latitude
Alias gps_data(3) = longitude_a         'Degress longitude (+ = East; - = West)
Alias gps_data(4) = longitude_b         'Minutes longitude
Alias gps_data(5) = speed               'Speed
Alias gps_data(6) = course       'Course over ground
Alias gps_data(7) = magnetic_variation  'Magnetic variation from true north (+ = East; - = West)
Alias gps_data(8) = fix_quality         'GPS fix quality: 0 = invalid, 1 = GPS, 2 = differential GPS, 6 = estimated
Alias gps_data(9) = nmbr_satellites     'Number of satellites used for fix
Alias gps_data(10) = altitude           'Antenna altitude
Alias gps_data(11) = pps                'usec into sec of system clock when PPS rising edge occurs, typically 990,000 once synced
Alias gps_data(12) = dt_since_gprmc     'Time since last GPRMC string, normally less than 1 second
Alias gps_data(13) = gps_ready          'Counts from 0 to 10, 10 = ready
Alias gps_data(14) = max_clock_change   'Maximum value the clock was changed in msec
Alias gps_data(15) = nmbr_clock_change  'Number of times the clock was changed

'Define Units to be used in data file header
Units latitude_a = degrees
Units latitude_b = minutes
Units longitude_a = degrees
Units longitude_b = minutes
Units speed = m/s
Units course = degrees
Units magnetic_variation = unitless
Units fix_quality = unitless
Units nmbr_satellites = unitless
Units altitude = m
Units pps = ms
Units dt_since_gprmc = s
Units gps_ready = unitless
Units max_clock_change = ms
Units nmbr_clock_change = samples


'Main Program
BeginProg
    'Initialize CNR4 multipliers
  SUpMult=1000/13.89
  SDnMult=1000/14.83
  LUpMult=1000/13.36
  LDnMult=1000/14.40
  PipeLineMode

  'Save flux_60mes on compile.
  flag(8) = TRUE
  Scan (SCAN_INTERVAL,mSec,100,0)
 
   
    GPS (latitude_a,Com2,LOCAL_TIME_OFFSET*3600,0,nmea_sentence(1))
    
    PulseCount(prop_WS,1,1,1,1000,0.098,0)
    
'------------------------------------------------------------------------    
    PulseCount (JY_WS_pre,1,2,0,1,1.0,0)

    If ( 0 <= JY_WS_pre AND JY_WS_pre < 51 ) Then
      JY_WS = 0.0588 * JY_WS_pre
    EndIf

    If ( 51 <= JY_WS_pre AND JY_WS_pre  < 89 ) Then
      JY_WS = 0.0562 * JY_WS_pre
    EndIf

    If ( 89 <= JY_WS_pre AND JY_WS_pre  < 193 ) Then
      JY_WS = 0.0518 * JY_WS_pre
    EndIf

    If ( 193 <= JY_WS_pre AND JY_WS_pre  < 287.5 ) Then
      JY_WS = 0.0522 * JY_WS_pre
    EndIf

    If ( 287.5 <= JY_WS_pre AND JY_WS_pre  < 382 ) Then
      JY_WS = 0.0524 * JY_WS_pre
    EndIf

    If ( 382 <= JY_WS_pre AND JY_WS_pre  < 474 ) Then
      JY_WS = 0.0527 * JY_WS_pre
    EndIf

    If ( 474 <= JY_WS_pre AND JY_WS_pre  < 547 ) Then
      JY_WS = 0.0548 * JY_WS_pre
    EndIf

    If ( 547 <= JY_WS_pre AND JY_WS_pre  < 640 ) Then
      JY_WS = 0.0547 * JY_WS_pre
    EndIf

    If ( 640 <= JY_WS_pre AND JY_WS_pre  < 733 ) Then
      JY_WS = 0.0546 * JY_WS_pre
    EndIf

    If ( 733 <= JY_WS_pre AND JY_WS_pre  < 826 ) Then
      JY_WS = 0.0545 * JY_WS_pre
    EndIf

    If ( 826 <= JY_WS_pre AND JY_WS_pre  < 920 ) Then
      JY_WS = 0.0543 * JY_WS_pre
    EndIf

    If ( 920 <= JY_WS_pre AND JY_WS_pre < 1013.5 ) Then
      JY_WS = 0.0543 * JY_WS_pre
    EndIf

    If ( 1013.5 <= JY_WS_pre AND JY_WS_pre  < 1107.5 ) Then
      JY_WS = 0.0542 * JY_WS_pre
    EndIf

    If ( 1107.5 <= JY_WS_pre AND JY_WS_pre  < 1200.8 ) Then
      JY_WS = 0.0541 * JY_WS_pre
    EndIf

    If ( 1200.8 <= JY_WS_pre AND JY_WS_pre  < 1294.5 ) Then
      JY_WS = 0.0541 * JY_WS_pre
    EndIf

    If ( 1294.5 <= JY_WS_pre AND JY_WS_pre  < 1388 ) Then
      JY_WS = 0.054 * JY_WS_pre
    EndIf

    If ( 1388 <= JY_WS_pre AND JY_WS_pre  < 1481.6 ) Then
      JY_WS = 0.054 * JY_WS_pre
    EndIf

    If ( 1481.6 <= JY_WS_pre AND JY_WS_pre  < 1575 ) Then
      JY_WS = 0.054 * JY_WS_pre
    EndIf

    If ( 1575 <= JY_WS_pre AND JY_WS_pre  < 1668.5 ) Then
      JY_WS = 0.0539 * JY_WS_pre
    EndIf

    If ( 1668.5 <= JY_WS_pre AND JY_WS_pre  < 1761.8 ) Then
      JY_WS = 0.0539 * JY_WS_pre
    EndIf

    If ( 1761.8 <= JY_WS_pre AND JY_WS_pre  < 1855.2 ) Then
      JY_WS = 0.0539 * JY_WS_pre
    EndIf


    If (JY_WS <0 OR JY_WS > 100) Then JY_WS = 0

    
    'Default Datalogger Battery Voltage measurement Batt_Volt:
    Battery(Batt_Volt)

    'Find the HMP45C vapor pressure, in kPa, using a sixth order polynomial (Lowe, 1976).
    '    e_sat = 0.1*(A_0+t_hmp*(A_1+t_hmp*(A_2+t_hmp*(A_3+t_hmp*(A_4+t_hmp*(A_5+t_hmp*A_6))))))
    '    e = e_sat * rh_hmp

    'Compute the HMP45C vapor density.
    '    h2o_hmp = e/((t_hmp+273.15)*0.0004615)

    'Compute moist air density.
    '    rho_a = (press-e)/((t_hmp+273.15)*0.28704)+(h2o_hmp/1000)
    rho_a = 1.2  'because there is no temp / RH sensor

    'Get CSAT3 wind and sonic temperature data.
    CSAT3 (wind(1),1,CSAT3_SDM_ADDR,91,20)
    wind_east = -1 * Uy_60m
    wind_north = Ux_60m

  	'Get LI7200 data
		LI7200 (li7200_raw(1),1,LI7200_SDM_ADDR,2)		
    ' Option 2: CO2 dry(??mol/mol), H2O dry(mmol/mol), CO2(mmol/m^3), H2O(mmol/m^3), AGC(%), 
    '            Ptotal (kPa), Tin (C), Tout (C), Tavg_Tin_Tout (C), Aux channel #1
		LI7200 (li7200_raw(10),1,LI7200_SDM_ADDR,6)	
		' Option 6: diagnostic	

    'Call Data Tables and Store Data
    CallTable delay_table
    If ( scan_count >= OFFSET ) Then
      '*** Load unlagged data from delay_3d table with record_offset
      GetRecord (dly_data_out(1),delay_table,CSAT3_REC_BCK)
      Move (Ux_60m,5,dly_data_out(1),5)  'Ux, Uy, Uz, Ts, csat_diag
      GetRecord (dly_data_out(1),delay_table,LI7200_REC_BCK)
      Move (li7200_co2_m,10,dly_data_out(6),10)  'co2_m, h2o_m, co2_d, h2o_d, agc, P, Tin, Tout, Tavg, diag

    CallTable ts_data_60m
      'diagnose the data based on diagnostic info from the instruments
      'Extract the four warning flags from the sonic diagnostic word.
      If ( diag_sonic <> NAN ) Then ( diag_sonic_tmp = diag_sonic ) Else ( diag_sonic_tmp = &hf000)
      mask_sonic = &h1000
      For i = 1 To 4
        diag_bits_sonic(i) = diag_sonic_tmp AND mask_sonic
        mask_sonic = mask_sonic*2
      Next i
      'Turn on the intermediate processing disable flag when any CSAT3
      'warning flag is high.
      sonic_disable_f = diag_sonic_tmp AND &hf000
      'Extract the four warning flags from the LI7200 diagnostic word.
      If ( li7200_diag <> NAN ) Then ( diag_li7200_tmp = NOT(li7200_diag) ) Else ( diag_li7200_tmp = &hffff)
      mask_li7200 = &h0010
      For i = 1 To 9
        diag_bits_li7200(i) = diag_li7200_tmp AND mask_li7200
        mask_li7200 = mask_li7200*2
      Next i
      li7200_disable_f = diag_li7200_tmp AND &h0ff0
      li7200_cov_disable_f = li7200_disable_f OR sonic_disable_f

    CallTable prop_wind_60m  '1min 05103 wind 
    

    Move (cov_array_li7200(1,1),4,Ux_60m,4)
    Move (cov_array_li7200(1,5),2,li7200_co2_m,2)
    CallTable comp_cov_li7200
    
    If ( comp_cov_li7200.Output(1,1) ) Then
          GetRecord (ux_stdev,comp_cov_li7200,1)
          
          Ts_stdev = SQR (Ts_stdev)
          ux_stdev = SQR (ux_stdev)
          uy_stdev = SQR (uy_stdev)
          uz_stdev = SQR (uz_stdev)
          co2_stdev = SQR (co2_stdev)
          h2o_stdev = SQR (h2o_stdev)
          
          'Rotate the CSAT3 RHC system so the negative x-axis points north.
          wnd_dir_compass = (360+sonic_azimuth-wnd_dir_sonic) MOD 360
          'Make the CSAT3 wind direction fall between 0 to 180 degrees and 0 to -180 degrees.
          If ( wnd_dir_sonic > 180 ) Then ( wnd_dir_sonic = wnd_dir_sonic-360 )
          
          Hs_60m(1) = rho_a * CP * uz_Ts_cov

          tau_60m(1) = SQR ((ux_uz_cov*ux_uz_cov) + (uy_uz_cov*uy_uz_cov))
          u_star_60m(1) = SQR (tau_60m(1))
          tau_60m(1) = rho_a * tau_60m(1)
          
      EndIf

    CallTable flux_60m

      slowsequence_disable_f = TRUE
      If ( slowsequence_finished_f ) Then
        slowsequence_finished_f = FALSE
        slowsequence_disable_f = FALSE
      EndIf
    Else
      scan_count = scan_count+1
    EndIf

  NextScan

  SlowSequence

  Scan (1,Sec,3,0)
    
    BrHalf(prop_WD,1,mV5000,13,3,1,5000,True,0,250,355,0)
    If prop_WD>=360 AND prop_WD<0  Then prop_WD=0

		VoltSe(amb_press,1,mV5000,11,True,3000,_60Hz,.24,500)


    'CNR4 Net Radiometer measurements 'ShortUp', 'ShortDn', 'LongUp', and 'LongDn'
    VoltDiff(CNR4(1),4,mV20C,1,True,0,250,CNR4Mult(),0)
    'CNR4 thermistor measurement 'CNR4TC'
    Resistance(CNR4TC,1,mV200,5,Ix1,1,1675,True,True,0,_60Hz,1.0,0)
    CNR4TC=CNR4TC/100
    PRT(CNR4TC,1,CNR4TC,1,0)

    'Calculate Kelvin temperature of CNR4
    CNR4TK=CNR4TC+273.15
    'Calculate temperature corrected long-wave radiation
    LongUpCo=LongUp+5.67e-8*CNR4TK^4
    LongDnCo=LongDn+5.67e-8*CNR4TK^4
    'Calculate short-wave net radiation
    Short_R_Net=ShortUp-ShortDn
    'Calculate long-wave net radiation
    Long_R_Net=LongUp-LongDn
    'Calculate albedo
    Albedo=ShortDn/ShortUp
    'Calculate net radiation
    Total_Net_R=Short_R_Net+Long_R_Net

'
  NextScan
EndProg
