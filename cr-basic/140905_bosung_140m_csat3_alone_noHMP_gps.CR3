'CR3000 Series Datalogger

'Created by Short Cut (2.5)
'
'green - c1
'white - c2
'brown - c3
'black / clear - g
'red - 12v
'black - g

Const ANGLE_FROM_NORTH = 85 'Negative when West of North, positive when East of
' North (degrees).
' () -> Compass coordinate system
' {} -> Right handed coordinate system aligned to magnetic North
' ANGLE_FROM_NORTH    (N)
'                 \   {-x}
'                  \   |
' CSAT3          \     |
' Transducers ->  *    |
'                  \   |
'                   \  |
'                    \ |
'    (W) {-y} --------[ ]--------> {+y} (E)
'                    / |
'         CSAT3 Block  |
'                      |
'                      |
'                      v
'                     {+x}
'                     (S)
'If the CSAT3 head is pointing West of North (above figure), the
'constant, ANGLE_FROM_NORTH, is negative.  If the CSAT3 head is pointing
'East of North, the constant, ANGLE_FROM_NORTH, is positive.
'
'The program computes the Compass wind direction, using the constant ANGLE_FROM_NORTH,
'and a CSAT3 wind direction.  Good CSAT3 wind directions are between -90 to 0 and 0 to
'90 degrees (-pi/2 to 0 and 0 to pi/2 radians), i.e. the wind is blowing into the CSAT3
'sensor head.

'Declare Variables and Units
Public Batt_Volt, PTemp_C
Public pressure
Public WS_ms
Public WindDir

Units Batt_Volt=Volts
Units pressure=mV
Units WS_ms=m/s
Units WindDir=Degrees

'Measurement Rate					'10 Hz			20 Hz
Const SCAN_INTERVAL = 50			'100 (mSec)		50 (mSec)

'Output period
Const OUTPUT_INTERVAL = 30			'On-line flux_140m data output interval in minutes.

Const CP = 1004.67				'Estimate of heat capacity of air [J/(kg K)].
'Const A_0 = 6.107799961			'Coefficients for the sixth order approximating
'Const A_1 = 4.436518521e-1		' saturation vapor pressure polynomial (Lowe,
'Const A_2 = 1.428945805e-2		' Paul R., 1976.:  An approximating polynomial for
'Const A_3 = 2.650648471e-4		' computation of saturation vapor pressure, J. Appl.
'Const A_4 = 3.031240396e-6		' Meteor., 16, 100-103).
'Const A_5 = 2.034080948e-8
'Const A_6 = 6.136820929e-11

Public rho_a				'Density of moist air.
'Public hmp(3)				'HMP45C vapor density, temperature and relative humidity.
'Public e					'HMP45C vapor pressure.
'Public e_sat				'Saturation vapor pressure.
'Alias hmp(1) = h2o_hmp
'Alias hmp(2) = t_hmp
'Alias hmp(3) = rh_hmp
Const press = 101.3

Units rho_a = kg/(m^3)
'Units h2o_hmp = g/(m^3)
'Units t_hmp = C
'Units rh_hmp = fraction

'Units e = kPa
'Units e_sat = kPa

'Program Control flags.
Public flag(8)

Const YES = -1					'Yes is defined as True or -1.
Const NO = 0					'No is defined as False or 0.

'CSAT3 variables with additional one or four scan delay.
Public wind(5)					'Wind, temperature, and diagnostic data from CSAT3.
Alias wind(1) = Ux_140m
Alias wind(2) = Uy_140m
Alias wind(3) = Uz_140m
Alias wind(4) = Ts_140m
Alias wind(5) = diag_csat
Units wind = m/s
Units Ts_140m = C
Units diag_csat = unitless



'Flux variables.


Public Hs_140m(1)		'Sensible heat flux_140m using sonic temperature.
Public tau_140m(1)		'Momentum flux_140m.
Public u_star_140m(1)	'Friction velocity.
Public cov_out(18)	'Covariances of wind and scalars, wind vector, mean soil temperature.

Units Hs_140m = W/m^2
'Units H = W/m^2
Units tau_140m = kg m/s^2
Units u_star_140m = m/s


'Aliases for covariances.
Alias cov_out(1) = Uz_140m_Uz_140m
Alias cov_out(2) = Uz_140m_Ux_140m
Alias cov_out(3) = Uz_140m_Uy_140m
Alias cov_out(4) = Uz_140m_Ts_140m
Alias cov_out(5) = Ux_140m_Ux_140m
Alias cov_out(6) = Ux_140m_Uy_140m
Alias cov_out(7) = Ux_140m_Ts_140m
Alias cov_out(8) = Uy_140m_Uy_140m
Alias cov_out(9) = Uy_140m_Ts_140m
Alias cov_out(10) = Ts_140m_Ts_140m


Units Uz_140m_Uz_140m = (m/s)^2
Units Uz_140m_Ux_140m = (m/s)^2
Units Uz_140m_Uy_140m = (m/s)^2
Units Uz_140m_Ts_140m = m C/s
Units Ux_140m_Ux_140m = (m/s)^2
Units Ux_140m_Uy_140m = (m/s)^2
Units Ux_140m_Ts_140m = m C/s
Units Uy_140m_Uy_140m = (m/s)^2
Units Uy_140m_Ts_140m = m C/s
Units Ts_140m_Ts_140m = C^2

Alias cov_out(13) = sonic_WD_compass
Alias cov_out(15) = sonic_WS
Alias cov_out(16) = rslt_sonic_WS
Alias cov_out(17) = wnd_dir_sonic
Alias cov_out(18) = std_WD_sonic
Units sonic_WD_compass = degrees
Units sonic_WS = m/s
Units rslt_sonic_WS = m/s
Units wnd_dir_sonic = degrees
Units std_WD_sonic = degrees

'Working variables.
Dim cov_in(4)				'Array used in the covariance instruction.
Dim j					'Counter variable.
Dim scan_count				'Counts the number scans that have been executed.
Dim wind_east				'Uy_140m wind in compass coordinate system.
Dim wind_north				'Ux_140m wind in compass coordinate system.


'Public CNR4(4)
'Public CNR4Mult(4)
'Public CNR4TC
'Public CNR4TK
'Public Short_R_Net
'Public Long_R_Net
'Public Albedo
'Public Total_Net_R
'Public LongUpCo
'Public LongDnCo
'
'Alias CNR4(1)=ShortUp
'Alias CNR4(2)=ShortDn
'Alias CNR4(3)=LongUp
'Alias CNR4(4)=LongDn
'Alias CNR4Mult(1)=SUpMult
'Alias CNR4Mult(2)=SDnMult
'Alias CNR4Mult(3)=LUpMult
'Alias CNR4Mult(4)=LDnMult
'
'Units CNR4TC=Deg C
'Units CNR4TK=K
'Units Short_R_Net=W/m^2
'Units Long_R_Net=W/m^2
'Units Albedo=W/m^2
'Units Total_Net_R=W/m^2
'Units LongUpCo=W/m^2
'Units LongDnCo=W/m^2
'Units ShortUp=W/m^2
'Units ShortDn=W/m^2
'Units LongUp=W/m^2
'Units LongDn=W/m^2




'Compute the covariances of vertical wind, co2, h2o, natural log of the krypton
'voltage, sonic temperature, and fine wire thermocouple temperature, as well as the
'other cross products, required to rotate the data into natural wind coordinates.
'This data is output every OUTPUT_INTERVAL minutes.
DataTable (comp_cov,TRUE,1)
  DataInterval (0,OUTPUT_INTERVAL,min,1)'

  Covariance (4,cov_in(1),IEEE4,0,10)
  WindVector (1,wind_east,wind_north,IEEE4,0,0,1,2)
  WindVector (1,Uy_140m,Ux_140m,IEEE4,0,0,1,2)

EndTable


'Set flag(8) high or set "Save Time Series?" custom menu option to Yes to save time
'series data.
DataTable (ts_data_140m,flag(8),-1)
  DataInterval (0,SCAN_INTERVAL,mSec,10)
  TableFile("CRD:"&Status.SerialNumber(1,1)&".ts_data_140m_140m",64,-1,0,20,Day,0,0)
  '  CardOut (0,-1)

  Sample (5,wind(1),IEEE4)

EndTable


'This table will hold twenty-eight days of flux_140m data.  This data is
' output every OUTPUT_INTERVAL minutes.
DataTable (flux_140m,TRUE,-1)
  DataInterval (0,OUTPUT_INTERVAL,Min,10)
  CardOut (0,5000000)

  Sample (1,Hs_140m(1),IEEE4)

  Sample (1,tau_140m(1),IEEE4)
  Sample (1,u_star_140m(1),IEEE4)
  Sample (10,cov_out(1),IEEE4)
  Average (4,wind(1),IEEE4,0)

  Sample (1,sonic_WD_compass,IEEE4)
  Sample (1,wnd_dir_sonic,IEEE4)
  Sample (1,sonic_WS,IEEE4)
  Sample (1,rslt_sonic_WS,IEEE4)

'  Sample(1,ShortUp,FP2)   'net radiometer
'  Sample(1,ShortDn,FP2)
'  Sample(1,LongUp,FP2)
'  Sample(1,LongDn,FP2)
'  Sample(1,CNR4TC,FP2)
'  Sample(1,CNR4TK,FP2)
'  Sample(1,Short_R_Net,FP2)
'  Sample(1,Long_R_Net,FP2)
'  Sample(1,Albedo,FP2)
'  Sample(1,Total_Net_R,FP2)
'  Sample(1,LongUpCo,FP2)
'  Sample(1,LongDnCo,FP2)

  Sample(1,Batt_Volt,FP2)
  Sample(1,PTemp_C,FP2)
 
EndTable

'*** Define Custom Menus ***


DisplayMenu ("Program Control",100)

  MenuItem ("Save Time Series?",flag(8))
MenuPick (YES,NO)

EndMenu


'Program the GPS16-HVS to use 38.4 kbaud, no parity, 8 data bits, and 1 stop bit
'*** Wiring ***
'CONTROL PORTS

'C3   GPS16-HVS pulse per second (gray)
'C4   GPS16-HVS RS-232 TxD (white)
'G    yellow, blue, shield

'POWER OUT

'12V  GPS16-HVS power (red)
'G    GPS16-HVS power and RS-232 signal reference (black)

Const LOCAL_TIME_OFFSET = 9            'Local time offset relative to UTC time

 

Dim nmea_sentence(2) As String * 90
Public gps_data(15)
Alias gps_data(1) = latitude_a          'Degrees latitude (+ = North; - = South)
Alias gps_data(2) = latitude_b          'Minutes latitude
Alias gps_data(3) = longitude_a         'Degress longitude (+ = East; - = West)
Alias gps_data(4) = longitude_b         'Minutes longitude
Alias gps_data(5) = speed               'Speed
Alias gps_data(6) = course       'Course over ground
Alias gps_data(7) = magnetic_variation  'Magnetic variation from true north (+ = East; - = West)
Alias gps_data(8) = fix_quality         'GPS fix quality: 0 = invalid, 1 = GPS, 2 = differential GPS, 6 = estimated
Alias gps_data(9) = nmbr_satellites     'Number of satellites used for fix
Alias gps_data(10) = altitude           'Antenna altitude
Alias gps_data(11) = pps                'usec into sec of system clock when PPS rising edge occurs, typically 990,000 once synced
Alias gps_data(12) = dt_since_gprmc     'Time since last GPRMC string, normally less than 1 second
Alias gps_data(13) = gps_ready          'Counts from 0 to 10, 10 = ready
Alias gps_data(14) = max_clock_change   'Maximum value the clock was changed in msec
Alias gps_data(15) = nmbr_clock_change  'Number of times the clock was changed

'Define Units to be used in data file header

Units latitude_a = degrees
Units latitude_b = minutes
Units longitude_a = degrees
Units longitude_b = minutes
Units speed = m/s
Units course = degrees
Units magnetic_variation = unitless
Units fix_quality = unitless
Units nmbr_satellites = unitless
Units altitude = m
Units pps = ms
Units dt_since_gprmc = s
Units gps_ready = unitless
Units max_clock_change = ms
Units nmbr_clock_change = samples


'Main Program
BeginProg

'  'Initialize CNR4 multipliers
'  SUpMult=1000/15.73
'  SDnMult=1000/15.96
'  LUpMult=1000/14.05
'  LDnMult=1000/14.93

  PipeLineMode

  'Save flux_140mes on compile.
  flag(8) = TRUE

  Scan (SCAN_INTERVAL,mSec,100,0)
    

   
    GPS (latitude_a,Com2,LOCAL_TIME_OFFSET*3600,0,nmea_sentence(1))
    

    
    'Default Datalogger Battery Voltage measurement Batt_Volt:
    Battery(Batt_Volt)



    'Find the HMP45C vapor pressure, in kPa, using a sixth order polynomial (Lowe, 1976).
    '    e_sat = 0.1*(A_0+t_hmp*(A_1+t_hmp*(A_2+t_hmp*(A_3+t_hmp*(A_4+t_hmp*(A_5+t_hmp*A_6))))))
    '    e = e_sat * rh_hmp

    'Compute the HMP45C vapor density.
    '    h2o_hmp = e/((t_hmp+273.15)*0.0004615)

    'Compute moist air density.
    '    rho_a = (press-e)/((t_hmp+273.15)*0.28704)+(h2o_hmp/1000)
    rho_a = 1.2  'because there is no temp / RH sensor

    'Get CSAT3 wind and sonic temperature data.
    CSAT3 (wind(1),1,3,91,20)


    wind_east = -1 * Uy_140m
    wind_north = Ux_140m


    'Call Data Tables and Store Data

    CallTable ts_data_140m

    'Load cov_in() array for the covariance computation.
    cov_in(1) = Uz_140m
    cov_in(2) = Ux_140m
    cov_in(3) = Uy_140m
    cov_in(4) = Ts_140m

    CallTable comp_cov

    If ( comp_cov.Output(1,1) ) Then

      GetRecord (cov_out(1),comp_cov,1)

      'The compass wind direction will be between 0 and 360 degrees.
      sonic_WD_compass = (sonic_WD_compass + ANGLE_FROM_NORTH)
      If ( sonic_WD_compass ) < 0 Then ( sonic_WD_compass = sonic_WD_compass + 360)
      sonic_WD_compass = sonic_WD_compass MOD 360

      '      'The CSAT3 wind direction will be between 0 to 180 degrees and 0 to -180 degrees
      '      ' (0 to pi radians and 0 to -pi radians).
      If ( wnd_dir_sonic ) > 180 Then ( wnd_dir_sonic = wnd_dir_sonic - 360 )
      '
      'Compute on-line flux_140mes.

      Hs_140m(1) = rho_a * CP * Uz_140m_Ts_140m

      tau_140m(1) = SQR ((Uz_140m_Ux_140m*Uz_140m_Ux_140m) + (Uz_140m_Uy_140m*Uz_140m_Uy_140m))
      u_star_140m(1) = SQR (tau_140m(1))
      tau_140m(1) = rho_a * tau_140m(1)

    EndIf


    CallTable flux_140m


  NextScan

'  SlowSequence
'
'  Scan (1,Sec,3,0)
'
'    Battery(Batt_Volt)
'    PanelTemp(PTemp_C,_60Hz)
'    'CNR4 Net Radiometer measurements 'ShortUp', 'ShortDn', 'LongUp', and 'LongDn'
'    VoltDiff(CNR4(1),4,mV20C,1,True,0,_60Hz,CNR4Mult(),0)
'    'CNR4 thermistor measurement 'CNR4TC'
'   Resistance(CNR4TC,1,mV200,5,Ix1,1,1675,True,True,0,_60Hz,1.0,0)
'    CNR4TC=CNR4TC/100
'    PRT(CNR4TC,1,CNR4TC,1,0)
''    BrHalf(CNR4TC,1,mV5000,9,1,1,2500,True,0,_60Hz,1,0)
'    'Convert measured voltage ratio into degrees Celsius
''    CNR4TC=1000*(CNR4TC/(1-CNR4TC))
''    CNR4TC=1/(1.0295e-3+2.391e-4*LN(CNR4TC)+1.568e-7*(LN(CNR4TC))^3)-273.15
'    'Calculate Kelvin temperature of CNR4
'    CNR4TK=CNR4TC+273.15
'    'Calculate temperature corrected long-wave radiation
'    LongUpCo=LongUp+5.67e-8*CNR4TK^4
'    LongDnCo=LongDn+5.67e-8*CNR4TK^4
'    'Calculate short-wave net radiation
'    Short_R_Net=ShortUp-ShortDn
'    'Calculate long-wave net radiation
'    Long_R_Net=LongUp-LongDn
'    'Calculate albedo
'    Albedo=ShortDn/ShortUp
'    'Calculate net radiation
'    Total_Net_R=Short_R_Net+Long_R_Net
'    'Call Data Tables and Store Data
'
'  NextScan
'EndProg
